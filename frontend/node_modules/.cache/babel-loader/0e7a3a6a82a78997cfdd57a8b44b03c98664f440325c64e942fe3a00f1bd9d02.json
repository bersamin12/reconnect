{"ast":null,"code":"// Assuming you're using Node.js for the backend\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst fs = require('fs');\nconst {\n  OpenAI\n} = require('openai');\nconst app = express();\nconst port = 3000;\nconst openai = new OpenAI('YOUR_OPENAI_API_KEY');\n\n// Middleware\napp.use(bodyParser.json());\n\n// Endpoint to fetch user information from SQL table\napp.post('/getUserInfo', (req, res) => {\n  // Assume req.body contains user ID or any necessary information to fetch user data from SQL\n  const userInfo = getUserInfoFromSQL(req.body.userId);\n\n  // Send the user information to ChatGPT API\n  openai.complete({\n    engine: 'davinci',\n    prompt: `Given the user information: ${userInfo}, what are some volunteer opportunities for them?`,\n    maxTokens: 100\n  }).then(response => {\n    const volunteerOpportunities = searchVolunteerOpportunities(response.data.choices[0].text);\n    res.json(volunteerOpportunities);\n  }).catch(error => {\n    console.error('Error:', error);\n    res.status(500).send('Internal Server Error');\n  });\n});\n\n// Function to search volunteer opportunities based on user information\nfunction searchVolunteerOpportunities(userPrompt) {\n  // Read volunteer opportunities from CSV file\n  const volunteerData = fs.readFileSync('volunteer.csv', 'utf8');\n  const volunteerRows = volunteerData.split('\\n');\n\n  // Perform search based on user prompt\n  // This is a simplistic example, you might need to parse CSV headers and data more accurately\n  const matchedOpportunities = [];\n  for (const row of volunteerRows) {\n    if (row.includes(userPrompt)) {\n      matchedOpportunities.push(row);\n    }\n  }\n  return matchedOpportunities;\n}\n\n// Dummy function to simulate fetching user information from SQL\nfunction getUserInfoFromSQL(userId) {\n  // Placeholder function to fetch user information from SQL\n  return `User information for ID ${userId}`;\n}\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});","map":{"version":3,"names":["express","require","bodyParser","fs","OpenAI","app","port","openai","use","json","post","req","res","userInfo","getUserInfoFromSQL","body","userId","complete","engine","prompt","maxTokens","then","response","volunteerOpportunities","searchVolunteerOpportunities","data","choices","text","catch","error","console","status","send","userPrompt","volunteerData","readFileSync","volunteerRows","split","matchedOpportunities","row","includes","push","listen","log"],"sources":["C:/Save Data Here/Coding stuff/Projects/reconnect/frontend/src/views/explore.js"],"sourcesContent":["// Assuming you're using Node.js for the backend\r\nconst express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst fs = require('fs');\r\nconst { OpenAI } = require('openai');\r\n\r\nconst app = express();\r\nconst port = 3000;\r\n\r\nconst openai = new OpenAI('YOUR_OPENAI_API_KEY');\r\n\r\n// Middleware\r\napp.use(bodyParser.json());\r\n\r\n// Endpoint to fetch user information from SQL table\r\napp.post('/getUserInfo', (req, res) => {\r\n    // Assume req.body contains user ID or any necessary information to fetch user data from SQL\r\n    const userInfo = getUserInfoFromSQL(req.body.userId);\r\n\r\n    // Send the user information to ChatGPT API\r\n    openai.complete({\r\n        engine: 'davinci',\r\n        prompt: `Given the user information: ${userInfo}, what are some volunteer opportunities for them?`,\r\n        maxTokens: 100\r\n    }).then((response) => {\r\n        const volunteerOpportunities = searchVolunteerOpportunities(response.data.choices[0].text);\r\n        res.json(volunteerOpportunities);\r\n    }).catch((error) => {\r\n        console.error('Error:', error);\r\n        res.status(500).send('Internal Server Error');\r\n    });\r\n});\r\n\r\n// Function to search volunteer opportunities based on user information\r\nfunction searchVolunteerOpportunities(userPrompt) {\r\n    // Read volunteer opportunities from CSV file\r\n    const volunteerData = fs.readFileSync('volunteer.csv', 'utf8');\r\n    const volunteerRows = volunteerData.split('\\n');\r\n\r\n    // Perform search based on user prompt\r\n    // This is a simplistic example, you might need to parse CSV headers and data more accurately\r\n    const matchedOpportunities = [];\r\n    for (const row of volunteerRows) {\r\n        if (row.includes(userPrompt)) {\r\n            matchedOpportunities.push(row);\r\n        }\r\n    }\r\n\r\n    return matchedOpportunities;\r\n}\r\n\r\n// Dummy function to simulate fetching user information from SQL\r\nfunction getUserInfoFromSQL(userId) {\r\n    // Placeholder function to fetch user information from SQL\r\n    return `User information for ID ${userId}`;\r\n}\r\n\r\napp.listen(port, () => {\r\n    console.log(`Server is running on port ${port}`);\r\n});\r\n"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAI,CAAC;AACxB,MAAM;EAAEG;AAAO,CAAC,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAEpC,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;AACrB,MAAMM,IAAI,GAAG,IAAI;AAEjB,MAAMC,MAAM,GAAG,IAAIH,MAAM,CAAC,qBAAqB,CAAC;;AAEhD;AACAC,GAAG,CAACG,GAAG,CAACN,UAAU,CAACO,IAAI,CAAC,CAAC,CAAC;;AAE1B;AACAJ,GAAG,CAACK,IAAI,CAAC,cAAc,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACnC;EACA,MAAMC,QAAQ,GAAGC,kBAAkB,CAACH,GAAG,CAACI,IAAI,CAACC,MAAM,CAAC;;EAEpD;EACAT,MAAM,CAACU,QAAQ,CAAC;IACZC,MAAM,EAAE,SAAS;IACjBC,MAAM,EAAE,+BAA+BN,QAAQ,mDAAmD;IAClGO,SAAS,EAAE;EACf,CAAC,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;IAClB,MAAMC,sBAAsB,GAAGC,4BAA4B,CAACF,QAAQ,CAACG,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC;IAC1Ff,GAAG,CAACH,IAAI,CAACc,sBAAsB,CAAC;EACpC,CAAC,CAAC,CAACK,KAAK,CAAEC,KAAK,IAAK;IAChBC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9BjB,GAAG,CAACmB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,uBAAuB,CAAC;EACjD,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACA,SAASR,4BAA4BA,CAACS,UAAU,EAAE;EAC9C;EACA,MAAMC,aAAa,GAAG/B,EAAE,CAACgC,YAAY,CAAC,eAAe,EAAE,MAAM,CAAC;EAC9D,MAAMC,aAAa,GAAGF,aAAa,CAACG,KAAK,CAAC,IAAI,CAAC;;EAE/C;EACA;EACA,MAAMC,oBAAoB,GAAG,EAAE;EAC/B,KAAK,MAAMC,GAAG,IAAIH,aAAa,EAAE;IAC7B,IAAIG,GAAG,CAACC,QAAQ,CAACP,UAAU,CAAC,EAAE;MAC1BK,oBAAoB,CAACG,IAAI,CAACF,GAAG,CAAC;IAClC;EACJ;EAEA,OAAOD,oBAAoB;AAC/B;;AAEA;AACA,SAASxB,kBAAkBA,CAACE,MAAM,EAAE;EAChC;EACA,OAAO,2BAA2BA,MAAM,EAAE;AAC9C;AAEAX,GAAG,CAACqC,MAAM,CAACpC,IAAI,EAAE,MAAM;EACnBwB,OAAO,CAACa,GAAG,CAAC,6BAA6BrC,IAAI,EAAE,CAAC;AACpD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}