{"ast":null,"code":"// Backend code (Node.js with Express.js)\n\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst csv = require('csv-parser');\nconst fs = require('fs');\nconst fetch = require('node-fetch');\nconst app = express();\nconst PORT = 3000;\n\n// Middleware to parse JSON bodies\napp.use(bodyParser.json());\n\n// POST endpoint for handling form submission\napp.post('/submit', async (req, res) => {\n  const {\n    username\n  } = req.body;\n\n  // Fetch information from your table based on the username\n  const userData = await fetchUserData(username);\n\n  // Read volunteer activities from CSV file\n  const volunteerActivities = await readCSV('volunteer_activities.csv');\n\n  // Prepare data to send to OpenAI API\n  const dataForOpenAI = {\n    user: userData,\n    volunteerActivities: volunteerActivities\n  };\n\n  // Call OpenAI API to process the data\n  const aiResponse = await callOpenAI(dataForOpenAI);\n\n  // Send the processed data back to the frontend\n  res.json({\n    result: aiResponse\n  });\n});\n\n// Function to fetch user data from your database\nasync function fetchUserData(username) {\n  // Implementation to fetch data from your database\n}\n\n// Function to read CSV file\nasync function readCSV(filename) {\n  const results = [];\n  return new Promise((resolve, reject) => {\n    fs.createReadStream(filename).pipe(csv()).on('data', data => results.push(data)).on('end', () => {\n      resolve(results);\n    }).on('error', error => {\n      reject(error);\n    });\n  });\n}\n\n// Function to call OpenAI API\nasync function callOpenAI(data) {\n  const apiKey = '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';\n  const apiUrl = 'https://api.openai.com/v1/engines/text-davinci-003/completions';\n  const response = await fetch(apiUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${apiKey}`\n    },\n    body: JSON.stringify({\n      prompt: data.user + ' ' + data.volunteerActivities,\n      max_tokens: 100\n    })\n  });\n  const responseData = await response.json();\n  return responseData.choices[0].text.trim();\n}\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","bodyParser","csv","fs","fetch","app","PORT","use","json","post","req","res","username","body","userData","fetchUserData","volunteerActivities","readCSV","dataForOpenAI","user","aiResponse","callOpenAI","result","filename","results","Promise","resolve","reject","createReadStream","pipe","on","data","push","error","apiKey","apiUrl","response","method","headers","JSON","stringify","prompt","max_tokens","responseData","choices","text","trim","listen","console","log"],"sources":["C:/Save Data Here/Coding stuff/Projects/reconnect/frontend/src/views/explore.js"],"sourcesContent":["// Backend code (Node.js with Express.js)\r\n\r\nconst express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst csv = require('csv-parser');\r\nconst fs = require('fs');\r\nconst fetch = require('node-fetch');\r\n\r\nconst app = express();\r\nconst PORT = 3000;\r\n\r\n// Middleware to parse JSON bodies\r\napp.use(bodyParser.json());\r\n\r\n// POST endpoint for handling form submission\r\napp.post('/submit', async (req, res) => {\r\n  const { username } = req.body;\r\n\r\n  // Fetch information from your table based on the username\r\n  const userData = await fetchUserData(username);\r\n\r\n  // Read volunteer activities from CSV file\r\n  const volunteerActivities = await readCSV('volunteer_activities.csv');\r\n\r\n  // Prepare data to send to OpenAI API\r\n  const dataForOpenAI = {\r\n    user: userData,\r\n    volunteerActivities: volunteerActivities,\r\n  };\r\n\r\n  // Call OpenAI API to process the data\r\n  const aiResponse = await callOpenAI(dataForOpenAI);\r\n\r\n  // Send the processed data back to the frontend\r\n  res.json({ result: aiResponse });\r\n});\r\n\r\n// Function to fetch user data from your database\r\nasync function fetchUserData(username) {\r\n  // Implementation to fetch data from your database\r\n}\r\n\r\n// Function to read CSV file\r\nasync function readCSV(filename) {\r\n  const results = [];\r\n  \r\n  return new Promise((resolve, reject) => {\r\n    fs.createReadStream(filename)\r\n      .pipe(csv())\r\n      .on('data', (data) => results.push(data))\r\n      .on('end', () => {\r\n        resolve(results);\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\n// Function to call OpenAI API\r\nasync function callOpenAI(data) {\r\n  const apiKey = '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';\r\n  const apiUrl = 'https://api.openai.com/v1/engines/text-davinci-003/completions';\r\n\r\n  const response = await fetch(apiUrl, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${apiKey}`,\r\n    },\r\n    body: JSON.stringify({\r\n      prompt: data.user + ' ' + data.volunteerActivities,\r\n      max_tokens: 100,\r\n    }),\r\n  });\r\n\r\n  const responseData = await response.json();\r\n  return responseData.choices[0].text.trim();\r\n}\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on port ${PORT}`);\r\n});\r\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,GAAG,GAAGF,OAAO,CAAC,YAAY,CAAC;AACjC,MAAMG,EAAE,GAAGH,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMI,KAAK,GAAGJ,OAAO,CAAC,YAAY,CAAC;AAEnC,MAAMK,GAAG,GAAGN,OAAO,CAAC,CAAC;AACrB,MAAMO,IAAI,GAAG,IAAI;;AAEjB;AACAD,GAAG,CAACE,GAAG,CAACN,UAAU,CAACO,IAAI,CAAC,CAAC,CAAC;;AAE1B;AACAH,GAAG,CAACI,IAAI,CAAC,SAAS,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACtC,MAAM;IAAEC;EAAS,CAAC,GAAGF,GAAG,CAACG,IAAI;;EAE7B;EACA,MAAMC,QAAQ,GAAG,MAAMC,aAAa,CAACH,QAAQ,CAAC;;EAE9C;EACA,MAAMI,mBAAmB,GAAG,MAAMC,OAAO,CAAC,0BAA0B,CAAC;;EAErE;EACA,MAAMC,aAAa,GAAG;IACpBC,IAAI,EAAEL,QAAQ;IACdE,mBAAmB,EAAEA;EACvB,CAAC;;EAED;EACA,MAAMI,UAAU,GAAG,MAAMC,UAAU,CAACH,aAAa,CAAC;;EAElD;EACAP,GAAG,CAACH,IAAI,CAAC;IAAEc,MAAM,EAAEF;EAAW,CAAC,CAAC;AAClC,CAAC,CAAC;;AAEF;AACA,eAAeL,aAAaA,CAACH,QAAQ,EAAE;EACrC;AAAA;;AAGF;AACA,eAAeK,OAAOA,CAACM,QAAQ,EAAE;EAC/B,MAAMC,OAAO,GAAG,EAAE;EAElB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCxB,EAAE,CAACyB,gBAAgB,CAACL,QAAQ,CAAC,CAC1BM,IAAI,CAAC3B,GAAG,CAAC,CAAC,CAAC,CACX4B,EAAE,CAAC,MAAM,EAAGC,IAAI,IAAKP,OAAO,CAACQ,IAAI,CAACD,IAAI,CAAC,CAAC,CACxCD,EAAE,CAAC,KAAK,EAAE,MAAM;MACfJ,OAAO,CAACF,OAAO,CAAC;IAClB,CAAC,CAAC,CACDM,EAAE,CAAC,OAAO,EAAGG,KAAK,IAAK;MACtBN,MAAM,CAACM,KAAK,CAAC;IACf,CAAC,CAAC;EACN,CAAC,CAAC;AACJ;;AAEA;AACA,eAAeZ,UAAUA,CAACU,IAAI,EAAE;EAC9B,MAAMG,MAAM,GAAG,qDAAqD;EACpE,MAAMC,MAAM,GAAG,gEAAgE;EAE/E,MAAMC,QAAQ,GAAG,MAAMhC,KAAK,CAAC+B,MAAM,EAAE;IACnCE,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUJ,MAAM;IACnC,CAAC;IACDrB,IAAI,EAAE0B,IAAI,CAACC,SAAS,CAAC;MACnBC,MAAM,EAAEV,IAAI,CAACZ,IAAI,GAAG,GAAG,GAAGY,IAAI,CAACf,mBAAmB;MAClD0B,UAAU,EAAE;IACd,CAAC;EACH,CAAC,CAAC;EAEF,MAAMC,YAAY,GAAG,MAAMP,QAAQ,CAAC5B,IAAI,CAAC,CAAC;EAC1C,OAAOmC,YAAY,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC;AAC5C;AAEAzC,GAAG,CAAC0C,MAAM,CAACzC,IAAI,EAAE,MAAM;EACrB0C,OAAO,CAACC,GAAG,CAAC,6BAA6B3C,IAAI,EAAE,CAAC;AAClD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}