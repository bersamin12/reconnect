{"ast":null,"code":"// Import necessary modules\nconst {\n  Client\n} = require('pg');\nconst fetch = require('node-fetch');\n\n// Function to connect to PostgreSQL database\nasync function connectToDatabase() {\n  const client = new Client({\n    user: 'your_username',\n    host: 'your_host',\n    database: 'your_database',\n    password: 'your_password',\n    port: 'your_port'\n  });\n  await client.connect();\n  return client;\n}\n\n// Function to fetch user information from PostgreSQL database\nasync function fetchUserInfo(userId) {\n  const client = await connectToDatabase();\n  const query = 'SELECT * FROM users WHERE id = $1';\n  const result = await client.query(query, [userId]);\n  await client.end();\n  return result.rows[0];\n}\n\n// Function to fetch volunteer opportunities based on user information\nasync function fetchVolunteerOpportunities(userInfo) {\n  const apiKey = 'your_chatgpt_api_key';\n  const apiUrl = 'https://api.openai.com/v1/your_endpoint'; // Replace with your OpenAI endpoint\n\n  const response = await fetch(apiUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${apiKey}`\n    },\n    body: JSON.stringify({\n      prompt: `Based on the user information: ${JSON.stringify(userInfo)}, suggest the best volunteer opportunities from volunteer.csv file.`,\n      max_tokens: 100\n    })\n  });\n  const data = await response.json();\n  return data.choices[0].text.trim();\n}\n\n// Main function to handle the request and response\nasync function main(userId) {\n  try {\n    const userInfo = await fetchUserInfo(userId);\n    const volunteerOpportunities = await fetchVolunteerOpportunities(userInfo);\n    console.log(volunteerOpportunities); // You can replace this with sending the data to your frontend\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\n// Replace userId with the actual user ID you want to fetch information for\nconst userId = 'user_id';\nmain(userId);","map":{"version":3,"names":["Client","require","fetch","connectToDatabase","client","user","host","database","password","port","connect","fetchUserInfo","userId","query","result","end","rows","fetchVolunteerOpportunities","userInfo","apiKey","apiUrl","response","method","headers","body","JSON","stringify","prompt","max_tokens","data","json","choices","text","trim","main","volunteerOpportunities","console","log","error"],"sources":["C:/Save Data Here/Coding stuff/Projects/reconnect/frontend/src/views/explore.js"],"sourcesContent":["// Import necessary modules\r\nconst { Client } = require('pg');\r\nconst fetch = require('node-fetch');\r\n\r\n// Function to connect to PostgreSQL database\r\nasync function connectToDatabase() {\r\n    const client = new Client({\r\n        user: 'your_username',\r\n        host: 'your_host',\r\n        database: 'your_database',\r\n        password: 'your_password',\r\n        port: 'your_port'\r\n    });\r\n\r\n    await client.connect();\r\n    return client;\r\n}\r\n\r\n// Function to fetch user information from PostgreSQL database\r\nasync function fetchUserInfo(userId) {\r\n    const client = await connectToDatabase();\r\n    const query = 'SELECT * FROM users WHERE id = $1';\r\n    const result = await client.query(query, [userId]);\r\n    await client.end();\r\n    return result.rows[0];\r\n}\r\n\r\n// Function to fetch volunteer opportunities based on user information\r\nasync function fetchVolunteerOpportunities(userInfo) {\r\n    const apiKey = 'your_chatgpt_api_key';\r\n    const apiUrl = 'https://api.openai.com/v1/your_endpoint'; // Replace with your OpenAI endpoint\r\n\r\n    const response = await fetch(apiUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${apiKey}`\r\n        },\r\n        body: JSON.stringify({\r\n            prompt: `Based on the user information: ${JSON.stringify(userInfo)}, suggest the best volunteer opportunities from volunteer.csv file.`,\r\n            max_tokens: 100\r\n        })\r\n    });\r\n\r\n    const data = await response.json();\r\n    return data.choices[0].text.trim();\r\n}\r\n\r\n// Main function to handle the request and response\r\nasync function main(userId) {\r\n    try {\r\n        const userInfo = await fetchUserInfo(userId);\r\n        const volunteerOpportunities = await fetchVolunteerOpportunities(userInfo);\r\n        console.log(volunteerOpportunities); // You can replace this with sending the data to your frontend\r\n    } catch (error) {\r\n        console.error('Error:', error);\r\n    }\r\n}\r\n\r\n// Replace userId with the actual user ID you want to fetch information for\r\nconst userId = 'user_id';\r\nmain(userId);\r\n"],"mappings":"AAAA;AACA,MAAM;EAAEA;AAAO,CAAC,GAAGC,OAAO,CAAC,IAAI,CAAC;AAChC,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAY,CAAC;;AAEnC;AACA,eAAeE,iBAAiBA,CAAA,EAAG;EAC/B,MAAMC,MAAM,GAAG,IAAIJ,MAAM,CAAC;IACtBK,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE,WAAW;IACjBC,QAAQ,EAAE,eAAe;IACzBC,QAAQ,EAAE,eAAe;IACzBC,IAAI,EAAE;EACV,CAAC,CAAC;EAEF,MAAML,MAAM,CAACM,OAAO,CAAC,CAAC;EACtB,OAAON,MAAM;AACjB;;AAEA;AACA,eAAeO,aAAaA,CAACC,MAAM,EAAE;EACjC,MAAMR,MAAM,GAAG,MAAMD,iBAAiB,CAAC,CAAC;EACxC,MAAMU,KAAK,GAAG,mCAAmC;EACjD,MAAMC,MAAM,GAAG,MAAMV,MAAM,CAACS,KAAK,CAACA,KAAK,EAAE,CAACD,MAAM,CAAC,CAAC;EAClD,MAAMR,MAAM,CAACW,GAAG,CAAC,CAAC;EAClB,OAAOD,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;AACzB;;AAEA;AACA,eAAeC,2BAA2BA,CAACC,QAAQ,EAAE;EACjD,MAAMC,MAAM,GAAG,sBAAsB;EACrC,MAAMC,MAAM,GAAG,yCAAyC,CAAC,CAAC;;EAE1D,MAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACkB,MAAM,EAAE;IACjCE,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUJ,MAAM;IACrC,CAAC;IACDK,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBC,MAAM,EAAE,kCAAkCF,IAAI,CAACC,SAAS,CAACR,QAAQ,CAAC,qEAAqE;MACvIU,UAAU,EAAE;IAChB,CAAC;EACL,CAAC,CAAC;EAEF,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC;AACtC;;AAEA;AACA,eAAeC,IAAIA,CAACtB,MAAM,EAAE;EACxB,IAAI;IACA,MAAMM,QAAQ,GAAG,MAAMP,aAAa,CAACC,MAAM,CAAC;IAC5C,MAAMuB,sBAAsB,GAAG,MAAMlB,2BAA2B,CAACC,QAAQ,CAAC;IAC1EkB,OAAO,CAACC,GAAG,CAACF,sBAAsB,CAAC,CAAC,CAAC;EACzC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZF,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;EAClC;AACJ;;AAEA;AACA,MAAM1B,MAAM,GAAG,SAAS;AACxBsB,IAAI,CAACtB,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}